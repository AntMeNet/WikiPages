"use strict";(self.webpackChunkant_me_doc=self.webpackChunkant_me_doc||[]).push([[466],{3905:function(t,e,a){a.d(e,{Zo:function(){return u},kt:function(){return h}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function i(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function l(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},i=Object.keys(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var s=n.createContext({}),d=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):l(l({},e),t)),a},u=function(t){var e=d(t.components);return n.createElement(s.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},p=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,i=t.originalType,s=t.parentName,u=o(t,["components","mdxType","originalType","parentName"]),p=d(a),h=r,c=p["".concat(s,".").concat(h)]||p[h]||m[h]||i;return a?n.createElement(c,l(l({ref:e},u),{},{components:a})):n.createElement(c,l({ref:e},u))}));function h(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=a.length,l=new Array(i);l[0]=p;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o.mdxType="string"==typeof t?t:r,l[1]=o;for(var d=2;d<i;d++)l[d]=a[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},3901:function(t,e,a){a.r(e),a.d(e,{assets:function(){return u},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return m}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),l=["components"],o={title:"Commands"},s=void 0,d={unversionedId:"commands/index",id:"commands/index",title:"Commands",description:"Your ants understand you! But their vocabulary isn\u2019t that large. The possibilities for communicating with them are listed below.",source:"@site/docs/commands/index.mdx",sourceDirName:"commands",slug:"/commands/",permalink:"/docs/commands/",draft:!1,editUrl:"https://github.com/AntMeNet/WikiPages/edit/main/docs/commands/index.mdx",tags:[],version:"current",lastUpdatedBy:"Tom Wendel",lastUpdatedAt:1658186447,formattedLastUpdatedAt:"7/18/2022",frontMatter:{title:"Commands"}},u={},m=[{value:"Methods",id:"methods",level:2},{value:"Movement",id:"movement",level:3},{value:"Rotation",id:"rotation",level:3},{value:"Food",id:"food",level:3},{value:"Communication",id:"communication",level:3},{value:"Combat",id:"combat",level:3},{value:"Debug",id:"debug",level:3},{value:"Properties",id:"properties",level:2},{value:"Caste-Related",id:"caste-related",level:3},{value:"Misc",id:"misc",level:3},{value:"Helper",id:"helper",level:2},{value:"Food",id:"food-1",level:3},{value:"Navigation",id:"navigation",level:3},{value:"Random Numbers",id:"random-numbers",level:3}],p={toc:m};function h(t){var e=t.components,a=(0,r.Z)(t,l);return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Your ants understand you! But their vocabulary isn\u2019t that large. The possibilities for communicating with them are listed below. "),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"movement"},"Movement"),(0,i.kt)("p",null,"The unit of length for the following commands is steps. For reference: an ant is four steps long and the map for a single-player\ngame measures 1200 x 900 steps. "),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Method"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"GoForward"),(0,i.kt)("td",{parentName:"tr",align:null},"The ant moves forward. The ant's destination remains unaltered. If a value is specified, the ant will aim for its destination again as soon as it has travelled the specified distance.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"GoToDestination"),(0,i.kt)("td",{parentName:"tr",align:null},"The ant saves the specified destination and walks to it.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"GoAwayFrom"),(0,i.kt)("td",{parentName:"tr",align:null},"The ant turns in the direction opposite the specified destination and then walks straight ahead. The ant's destination remains unaltered and the walking distance can be specified.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"GoToAnthill"),(0,i.kt)("td",{parentName:"tr",align:null},"The ant saves the nearest anthill as its destination and walks towards it.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Stop"),(0,i.kt)("td",{parentName:"tr",align:null},"The ant stands still and forgets its current destination. In the next round the result of Waiting() is called.")))),(0,i.kt)("h3",{id:"rotation"},"Rotation"),(0,i.kt)("p",null,"All values are specified as whole angles measured in degrees proceeding clockwise. 0 thus means right, 90 is down, 180 is left,\n270 is up and 360 is right again. The values do not need to be between 0 and 359. Larger or smaller values will be recalculated\nautomatically."),(0,i.kt)("p",null,"For an ant, turning always takes precedence over moving. Thus, if an ant receives a \u201cturn\u201d command before it has finished executing\na \u201cgo\u201d command, the \u201cgo\u201d command will be interrupted, the \u201cturn\u201d command will be executed instead, and then the \u201cgo\u201d command will\nbe resumed. An ant cannot turn and walk at the same time. "),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Method"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"TurnToDirection"),(0,i.kt)("td",{parentName:"tr",align:null},"The ant turns in the specified direction. The angle around which it turns is determined automatically.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"TurnByDegrees"),(0,i.kt)("td",{parentName:"tr",align:null},"The ant turns itself around the specified angle. Positive values turn the ant to the right, negative values turn it to the left.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"TurnAround"),(0,i.kt)("td",{parentName:"tr",align:null},"The ant turns 180 degrees in the opposite direction. Has the same effect as TurnByDegrees(180).")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"TurnToDestination"),(0,i.kt)("td",{parentName:"tr",align:null},"The ant turns in the direction of the specified destination.")))),(0,i.kt)("h3",{id:"food"},"Food"),(0,i.kt)("p",null,"AntMe! has two different food sources: sugar and apples (or fruit). Both can be picked up with the Take command, but they have\ndifferent effects on the ant's properties. Sugar is divided into individual cubes and each cube causes an increase in CurrentLoad.\nApples, on the other hand, must be carried by several ants and can be recognized by the property CarryingFruit."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Method"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Take"),(0,i.kt)("td",{parentName:"tr",align:null},"The ant picks up the specified food. In the case of a mound of sugar, it takes as much as possible until it reaches its maximum load (see CurrentLoad and MaximumLoad). In the case of a piece of fruit, the ant begins carrying the fruit (see CarryingFruit).")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Drop"),(0,i.kt)("td",{parentName:"tr",align:null},"The ant drops the food that it is currently carrying. Sugar is lost while apples remain where they fall and can be picked up again later. The command is not necessary when delivering food to an anthill - that occurs automatically.")))),(0,i.kt)("h3",{id:"communication"},"Communication"),(0,i.kt)("p",null,"Markers are the primary means of communication for ants. Ants that want to communicate something to other ants use markers to pass on information."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Method"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MakeMark"),(0,i.kt)("td",{parentName:"tr",align:null},"The ant sprays a scent marker at the current location. The possible parameters are data contained in the marker (these can be read out of the result of Spots(Marker) via marker.Information) and how far the maker spreads out. The farther the marker spreads out, the faster it will disappear.")))),(0,i.kt)("h3",{id:"combat"},"Combat"),(0,i.kt)("p",null,"AntMe! is a peaceful approach to learning how to code, but even in this game, ants and programmers alike have to face their natural\nenemies\u2014bugs. It is possible to actively attack bugs and enemy ants. You'll find more information about combat on the Ant Development page."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Method"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Attack"),(0,i.kt)("td",{parentName:"tr",align:null},"The ant saves the specified bug or the specified enemy ant as its destination and walks toward it. When the ant arrives at its destination, it begins to fight.")))),(0,i.kt)("h3",{id:"debug"},"Debug"),(0,i.kt)("p",null,"If your ants aren't doing what they're supposed to, there are a couple of resources you can use to try to find out why. AntMe!\nprovides some special tools in addition to those included in Visual Studio."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Method"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Think"),(0,i.kt)("td",{parentName:"tr",align:null},"This command causes the ant to display thought bubbles that can be used for troubleshooting and debugging.")))),(0,i.kt)("h2",{id:"properties"},"Properties"),(0,i.kt)("p",null,"Properties allow you to examine the conditions and values of ants and other game elements."),(0,i.kt)("h3",{id:"caste-related"},"Caste-Related"),(0,i.kt)("p",null,"The following values of an ant are determined by its caste."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MaximumEnergy"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the ant's maximum energy. The unit is hit points.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MaximumSpeed"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the ant's maximum speed. The unit is steps per round.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"MaximumLoad"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the maximum load that the ant can bear. The unit is food points. This value determines how much sugar the ant can carry at once and how fast it can carry an apple without the help of other ants.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Range"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the distance in steps that the ant can travel before it dies of hunger. After the ant has travelled a third of the value, the event GettingTired() is called and the value of IsTired is set to \u201ctrue\u201d. (See WalkedRange).")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Strength"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the ant's attack value. The attack value determines how many hit points the ant deducts from an enemy in each round. The unit is hit points.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Viewrange"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the ant's visual range in steps. This range determines how far the ant must be from game elements like sugar in order for the ant to see them. The direction that the ant is facing does not play a role (ants have 360 vision in this game).")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"RotationSpeed"),(0,i.kt)("td",{parentName:"tr",align:null},"Specifies the speed with which an ant can turn. The unit is degrees per round.")))),(0,i.kt)("h3",{id:"misc"},"Misc"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"CurrentEnergy"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the ant's current energy. The unit is hit points. If an ant has 0 hit points or fewer, it dies. This value is always less than or equal to MaximumEnergy.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"CurrentSpeed"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the ant's current possible speed. The unit is steps per round. The value is influenced by the ant's current load. Ants that are carrying a full load can only travel at half of their maximum speed. The property always returns a value greater than 0, even if the ant is standing still. This value is always less than or equal to MaximumSpeed.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"CurrentLoad"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the weight of the load that the ant is currently carrying. The unit is food points. This value is always smaller than or equal to MaximumLoad.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"BugsInViewrange"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the number of bugs in the ant's 360\xb0 visual range. The result of this calculation depends on the ant's visual range.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ForeignAntsInViewrange"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the number of enemy ants in the ant's 360\xb0 visual range. The result of this calculation depends on the ant's visual range.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"FriendlyAntsInViewrange"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the number of friendly ants from the same colony in the ant's 360\xb0 visual range. The result of the calculation depends on the ant's visual range.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"FriendlyAntsFromSameCasteInViewrange"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the number of friendly ants from the same colony and the same caste in the ant's 360\xb0 visual range. The result of this calculation depends on the ant's visual range.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"TeamAntsInViewrange"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the number of friendly ants from the same team in the ant's 360\xb0 visual range. The result of this calculation depends on the ant's visual range.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"DistanceToAnthill"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the distance in steps to the nearest friendly anthill.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"CarryingFruit"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the piece of fruit the ant is currently carrying. If the ant is not carrying a piece of fruit, the value returned is null.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Caste"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the name of the ant's caste.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Destination"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the ant's current destination. If the ant currently has no destination, the value returned is null.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"IsTired"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns whether the ant is tired. The ant becomes tired as soon as it has travelled a third of its maximum range. Once this value has been exceeded, this property changes from false to true and the event GettingTired() is called.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"DistanceToDestination"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns how many steps forward the ant must go before it reaches its destination. This value is reduced each round by CurrentSpeed.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"DegreesToDestination"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns how many degrees the ant still has to turn before it moves forward again. This value is reduced each round by RotationSpeed.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Direction"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the direction that the ant is facing on the map.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ReachedDestination"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns whether the ant has reached its destination or not.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"WalkedRange"),(0,i.kt)("td",{parentName:"tr",align:null},"This property returns the total number of steps that the ant has travelled since its last visit to an anthill. See Range.")))),(0,i.kt)("h2",{id:"helper"},"Helper"),(0,i.kt)("p",null,"This section covers methods that are helpful but that are not commands issued to ants."),(0,i.kt)("h3",{id:"food-1"},"Food"),(0,i.kt)("p",null,"The following methods help with the evaluation of food sources."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Method"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"NeedsCarrier"),(0,i.kt)("td",{parentName:"tr",align:null},"Evaluates if the specified fruit needs more ants to carry it.")))),(0,i.kt)("h3",{id:"navigation"},"Navigation"),(0,i.kt)("p",null,"Special keywords are required to refer to the current ant in the following commands. C# uses the keyword \u201cthis\u201d and Visual Basic uses the keyword \u201cMe\u201d."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Method"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Coordinate.GetDistanceBetween"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the distance in steps between two specified game elements.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Coordinate.GetDegreesBetween"),(0,i.kt)("td",{parentName:"tr",align:null},"Returns the direction from the first game element specified to the second game element specified.")))),(0,i.kt)("h3",{id:"random-numbers"},"Random Numbers"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Method"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"RandomNumber.Number"),(0,i.kt)("td",{parentName:"tr",align:null},"Generates a random number within the specified limits. If only one parameter is specified, a random number will be generated between 0 and the specified limit -1. If two parameters are specified, a number between will be generated between the lower limit and the upper limit -1.")))))}h.isMDXComponent=!0}}]);